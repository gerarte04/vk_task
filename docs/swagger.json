{
    "swagger": "2.0",
    "info": {
        "title": "Marketplace API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/ads/create": {
            "post": {
                "description": "Для успешной аутентификации должен быть установлен хедер 'Authorization: Bearer %token%`.\nДля параметров объявления по умолчанию установлены следующие ограничения:\n- заголовок должен быть непустым и не длиннее 100 символов;\n- описание должно быть не длиннее 2000 символов;\n- цена должна быть положительной, но не более 10.000.000;\n- адрес картинки должен быть действительным, сама картинка должна быть формата jpeg, png или gif и иметь размер не более, чем 1024x1024.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ads"
                ],
                "summary": "Create new ad",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token with Bearer prefix",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Ad details",
                        "name": "ad",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Ad"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created",
                        "schema": {
                            "$ref": "#/definitions/domain.Ad"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Object not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ads/feed": {
            "get": {
                "description": "Для успешной аутентификации должен быть установлен хедер 'Authorization: Bearer %token%` (опционально).\nРазмер страницы по умолчанию 5. Поле item_number обозначает порядковый номер объявления среди всех объявлений, подходящих под фильтры.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ads"
                ],
                "summary": "Get feed with options",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token with Bearer prefix (optional)",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Lower price limit",
                        "name": "lower_price",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Higher price limit",
                        "name": "higher_price",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order option ('creation_time' or 'price')",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Ascending or descending order",
                        "name": "ascending",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully got feed",
                        "schema": {
                            "$ref": "#/definitions/types.GetFeedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Object not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login and get access token",
                "parameters": [
                    {
                        "description": "Login and password",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PostLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authorized",
                        "schema": {
                            "$ref": "#/definitions/types.PostLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Object not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "По умолчанию редусмотрены следующие ограничения на логин и пароль:\n- логин может состоять только из букв, цифр и символа '_', его длина должна быть в интервале от 3 до 30;\n- пароль должен содержать хотя бы символ из набора '!@#$%^\u0026*?/', его длина должна быть в интервале от 8 до 30.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Login and password",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PostRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Object not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Ad": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "image_address": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.FeedPageItem": {
            "type": "object",
            "properties": {
                "ad": {
                    "$ref": "#/definitions/domain.Ad"
                },
                "item_number": {
                    "type": "integer"
                },
                "self_authored": {
                    "type": "boolean"
                }
            }
        },
        "domain.User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                }
            }
        },
        "types.GetFeedResponse": {
            "type": "object",
            "properties": {
                "feed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.FeedPageItem"
                    }
                }
            }
        },
        "types.PostLoginRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "types.PostLoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "types.PostRegisterRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}